# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import graph_executor_pb2 as mantik_dot_engine_dot_graph__executor__pb2


class GraphExecutorServiceStub(object):
    """Responsible for evaluating the value of graph objects. 
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.FetchDataSet = channel.unary_unary(
                '/ai.mantik.engine.protos.GraphExecutorService/FetchDataSet',
                request_serializer=mantik_dot_engine_dot_graph__executor__pb2.FetchItemRequest.SerializeToString,
                response_deserializer=mantik_dot_engine_dot_graph__executor__pb2.FetchItemResponse.FromString,
                )
        self.SaveItem = channel.unary_unary(
                '/ai.mantik.engine.protos.GraphExecutorService/SaveItem',
                request_serializer=mantik_dot_engine_dot_graph__executor__pb2.SaveItemRequest.SerializeToString,
                response_deserializer=mantik_dot_engine_dot_graph__executor__pb2.SaveItemResponse.FromString,
                )
        self.DeployItem = channel.unary_unary(
                '/ai.mantik.engine.protos.GraphExecutorService/DeployItem',
                request_serializer=mantik_dot_engine_dot_graph__executor__pb2.DeployItemRequest.SerializeToString,
                response_deserializer=mantik_dot_engine_dot_graph__executor__pb2.DeployItemResponse.FromString,
                )


class GraphExecutorServiceServicer(object):
    """Responsible for evaluating the value of graph objects. 
    """

    def FetchDataSet(self, request, context):
        """* Evaluates and fetches the content of a dataset. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SaveItem(self, request, context):
        """* Evaluates and saves an item to the repository. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeployItem(self, request, context):
        """* Deploys an Item to the cluster. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GraphExecutorServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'FetchDataSet': grpc.unary_unary_rpc_method_handler(
                    servicer.FetchDataSet,
                    request_deserializer=mantik_dot_engine_dot_graph__executor__pb2.FetchItemRequest.FromString,
                    response_serializer=mantik_dot_engine_dot_graph__executor__pb2.FetchItemResponse.SerializeToString,
            ),
            'SaveItem': grpc.unary_unary_rpc_method_handler(
                    servicer.SaveItem,
                    request_deserializer=mantik_dot_engine_dot_graph__executor__pb2.SaveItemRequest.FromString,
                    response_serializer=mantik_dot_engine_dot_graph__executor__pb2.SaveItemResponse.SerializeToString,
            ),
            'DeployItem': grpc.unary_unary_rpc_method_handler(
                    servicer.DeployItem,
                    request_deserializer=mantik_dot_engine_dot_graph__executor__pb2.DeployItemRequest.FromString,
                    response_serializer=mantik_dot_engine_dot_graph__executor__pb2.DeployItemResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ai.mantik.engine.protos.GraphExecutorService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class GraphExecutorService(object):
    """Responsible for evaluating the value of graph objects. 
    """

    @staticmethod
    def FetchDataSet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai.mantik.engine.protos.GraphExecutorService/FetchDataSet',
            mantik_dot_engine_dot_graph__executor__pb2.FetchItemRequest.SerializeToString,
            mantik_dot_engine_dot_graph__executor__pb2.FetchItemResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SaveItem(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai.mantik.engine.protos.GraphExecutorService/SaveItem',
            mantik_dot_engine_dot_graph__executor__pb2.SaveItemRequest.SerializeToString,
            mantik_dot_engine_dot_graph__executor__pb2.SaveItemResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeployItem(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai.mantik.engine.protos.GraphExecutorService/DeployItem',
            mantik_dot_engine_dot_graph__executor__pb2.DeployItemRequest.SerializeToString,
            mantik_dot_engine_dot_graph__executor__pb2.DeployItemResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
